///////////////////////////////////////////////////////////////////////////
                              Reflection
                          MileStone - #3
Full Name  : Eric Jo
Student ID#: 137057188
Email      : hjo9@myseneca.ca
Section    : NII

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. void viewAllAppointments(struct ClinicData* data);

This function passes the ClinicaData structure by address.
It prompts user to input year, month, day for searching for the appointments data in the database.
To sort the data by the choronological order, I used bubble sort. I made and used a temporary structure value
to compare and change the order with two array values. For loop nested in for loop was needed for 2 counts
for comparing two array values. And there are a bunch of if else statements in the for loop to validate whether the 
previous date is earlier than the latter date. Once the loop is done, it displays all appointments except for the date has
zero value.

void inputMonth(int* year, int* month);
This function passes the address of year and month that user input in other functions such as addAppointments.
It helps to find how many days are contained in the month that user input. If the month is 3(March)
it prompts to input values between 1 and 31 for day. If the month is 2(February) it validates whether the
year is leap year or not. And then, it prompts to input values along with the result.

void removeAppointment(struct Appointment*, int, struct Patient*, int)
This function passes 2 structures and 2 integers. First, It prompts to input local variables year, month, and day. 
When user input month and year, the functions, inputMonth() and inputDay() are called to validate the values 
are correct along with actual year, month, and date. Once the local variables are set, compare the array in struct 
Appointment with the local variables using for loop. When the matched result found, index is found, flag is set and loop is broken.
As same, the array in struct patient is compared with a local variable, patient Number resulting index2 found.
If flag is 0, the function displays error message otherwise, it displays the patient's detail and prompt user to remove the matched
appointment. The input value is validated by inputCharOption(). When validated, the matched array's date and time values
become 0 so that, display no data when the user view the appointment schedule.

2. This Source code file has a lot of functions that includes prompting users to input specific values to progress the entire program.
In core.c file, there are user interface functions which validate if the user input value is correct along with designated type or range.
Those have all scanfs so, they can be called whenever user inputs are needed to scan a value in a local variable in other function.
The called function can display error messages if the value is not the specified format or invalid. Therefore, it looks much more compact
and readable when the core.c functions are called than just repetitive scanf is indicated. For example, inputCharOption() in core.c can be used
in removePatient and removeAppointment function because those two prompts user to input y or n. A string value which has y, and n is passed
to the function. Userinput is executed inside of the function and validated.

3. In void viewAllAppointments(struct ClinicData* data); I put displayScheduleTableHeader() and displayScheduleDate() to display tabular
data to show the list of the appointments. With these functions, I didn't need to copy and paste redundant and complicated loops in
the viewAllAppointments function. Using the defined functions in other functions is so useful because it saves a lot of time to code and
give the easy look for programmers who see the code at first.

In void removeAppointmets(struct Appointment*, int, struct Patient*, int), I put inputMonth(), inputDay(), and inputCharOptions.
The reason that I used two functions related to date is that the function request user to give data for searching an existing appointment
in the database. Those functions made the function looks brief. inputCharOptions is used for validating the userInput is y or n. User selection
whether the removing will progress is up to the selection, so the function was a good contribution to display error message if the user 
input invalid value.