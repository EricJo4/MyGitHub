///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Eric Jo
Student ID#: 137057188

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. When you see a statement "for (day = 1; day<= LOG_DAYS; day++)" of my code, I don't need to
use a magic number like "for(day = 1; day<= 3; day++)". The '3' without Macro Directive appears out
of nowhere, so it is hard for other people who read the code to know where it was from. Macro Directive
and constant literals guarantee readability of the code.
Macro Directive is more useful than using magic numbers if you want to use it repeatedly ,which is more 
efficient.
Macro Directive and constant literals cannot be changed once it was defined, so there no anxiety it 
might be changed by mistake during building code.

2.  do
        {
            printf("   Morning rating (0.0-5.0): ");
            scanf("%f", &morning);
            if (morning < 0.0 || morning > 5.0)
            printf("      ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
        } while (morning < 0.0 || morning > 5.0);
        morningSum += morning;

        do
        {
            printf("   Evening rating (0.0-5.0): ");
            scanf("%f", &evening);
            if (evening < 0.0 || evening > 5.0)
            printf("      ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
        } while (evening < 0.0 || evening > 5.0);
        eveningSum += evening;

The sum variables are out of the validation loops. Those look clearer than that putting them inside of
loops.
This method sums all inputs for each rating has been determined. so I didn't need to repeat the validation
loops for summing the repeated ratings.
For getting averages in loops, complicated calculation is needed over and over in the loop.
Since I got the sums of morning and evening ratings, averages can be calculated easily like below.

printf("Summary\n");
    printf("=======\n");
    printf("Morning total rating: %.3f\n", morningSum);
    printf("Evening total rating:  %.3f\n", eveningSum);
    printf("----------------------------\n");
    printf("Overall total rating: %.3f\n", morningSum + eveningSum);
    printf("\n");
    printf("Average morning rating:  %.1f\n", morningSum/LOG_DAYS);
    printf("Average evening rating:  %.1f\n", eveningSum/LOG_DAYS);
    printf("----------------------------\n");
    printf("Average overall rating:  %.1f\n", ((morningSum/LOG_DAYS + eveningSum/LOG_DAYS))/2);