///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Eric Jo
Student ID#: 137057188
Email      : hjo9@myseneca.ca
Section    : NII

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Double can store a double-precision while float can do a single-precision. That is why price1
is not presented exactly with the intended value.
17.96f is presented 17.959999 so 17.96f*100 is 1795.9999. Then, (int) truncate the decimal points.
On the other hands, other samples' second decimal places are presented as intended in both float and double.

2. Those three examples have the same results by type promotion. There is Implicit Type Conversion which has
another name, Coercion. Data type indentifier 'int' makes a variable 'money' integar. Furthermore, they all have Explicit Type 
Conversion which is called Type Casting. Additional decimal point and (double) is the example of that. Division beween 
double and integar results in a value in double because double is in higher rank than the other one. At last, format code,
.2lf prints values in second decimal place.

3.  
a) The value of the variable 'result' is 72 because variables 'money' and 'result' are both integar by Implicit Type Conversion
so expression with the variables truncates decimal points.

b) 1: $0.00, 2: $72, 3: $0.00, 4: $72

c) 1 and 3 return both $0.00 because both printf codes have different types in varibles in the expression and format code. 
I conclude printf function just print 0 with the format determined with the format code if the format code and variables do 
not match.
To print intended value, type casting which converts the integar to float or double is needed 